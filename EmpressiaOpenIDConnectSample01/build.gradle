plugins {
	id "java";
	id "war";
}

ext.moduleName = project.name;

repositories {
	jcenter();
}

dependencies {
	// use Payara Micro.
	// launch.jsonのmainClassに指定するには、runtimeClasspathに入らないと怒られてしまう。
	providedRuntime(group:"fish.payara.extras", name:"payara-micro", version:"5.194");
	// use Empressia OpenID Connect.
	implementation(group:"jp.empressia", name:"jp.empressia.enterprise.security.oidc", version:"1.0.1");
	// use CDI.
	providedCompile(group:"javax.enterprise", name:"cdi-api", version:"2.0.SP1");
	// use Java EE Security API.
	providedCompile(group:"javax.security.enterprise", name: "javax.security.enterprise-api", version:"1.0");
	// use HttpServletRequest, HttpServletResponse.
	providedRuntime(group:"javax.servlet", name: "javax.servlet-api", version:"4.0.1");
	// use for security interceptor priority.
	providedRuntime(group:"javax.annotation", name:"javax.annotation-api", version:"1.3.2");
	// use MicroProfile Config API.
	providedRuntime(group:"org.eclipse.microprofile.config", name:"microprofile-config-api", version:"1.3");
	// use JCache for security token cache (not in Jave EE 8).
	// providedRuntime(group:"javax.cache", name:"cache-api", version:"1.1.1");
	// use for JWT.
	// providedRuntime(group:"io.jsonwebtoken", name:"jjwt-impl", version:"0.10.7");
	// providedCompile(group:"io.jsonwebtoken", name:"jjwt-jackson", version:"0.10.7");
	// use JAX-RS.
	providedCompile(group:"javax.ws.rs", name:"javax.ws.rs-api", version:"2.1.1");
	// use JPA.
	providedCompile(group:"org.eclipse.persistence", name:"javax.persistence", version:"2.2.1");
	// use EclipseLink for customize DatabasePlatform.
	providedCompile(group:"org.eclipse.persistence", name:"org.eclipse.persistence.jpa", version:"2.7.4");
	// use Transactional.
	providedCompile(group:"javax.transaction", name:"javax.transaction-api", version:"1.3");
	// use SQLite.
	runtimeOnly(group:"org.xerial", name:"sqlite-jdbc", version:"3.28.0");
}

tasks.withType(JavaCompile) {
	options.encoding "UTF-8";
	options.compilerArgs << "-parameters";
}

war {
	baseName moduleName;
	manifest {
		attributes (
			"Automatic-Module-Name": moduleName
		);
	}
}

task copyRuntime(type: Copy) {
	into "${buildDir}/runtime/";
	from configurations.providedRuntime - configurations.providedCompile;
}
def libraries = configurations.runtimeClasspath - configurations.providedRuntime;
task copyLibraries(type: Copy) {
	into "${buildDir}/libraries/";
	from libraries;
}
task createArgfile {
	def argfile = file("${buildDir}/argfile/argfile.txt");
	def runtimeDirectory = file("${buildDir}/runtime/");
	def librariesDirectory = file("${buildDir}/libraries/");
	runtimeDirectory.mkdirs();
	inputs.dir(runtimeDirectory);
	if(libraries.isEmpty() == false) {
		librariesDirectory.mkdirs();
		inputs.dir(librariesDirectory);
	}
	outputs.files(argfile);
	doLast {
		argfile.parentFile.mkdirs();
		argfile.write("\"" + runtimeDirectory.listFiles().join(";").replaceAll("\\\\", "\\\\\\\\") + "\"", "UTF-8");
	}
}
createArgfile.dependsOn(copyRuntime);
createArgfile.dependsOn(copyLibraries);

task start(type: JavaExec) {
	main = "-jar";
	args = [configurations.providedRuntime.find { it.name.contains("payara-micro-") }.absolutePath, "--deploy", "\"${rootProject.buildDir}/libs/${moduleName}.war\""];
}
start.dependsOn(tasks.war);
