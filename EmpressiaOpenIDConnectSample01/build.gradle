plugins {
	id "java";
	id "war";
	id "jp.empressia.gradle.plugin.misc" version "1.0.5";
}

ext.moduleName = project.name;

repositories {
	mavenCentral();
}

dependencies {
	// use Payara Micro.
	// launch.jsonのmainClassに指定するには、runtimeClasspathに入らないと怒られてしまう。
	providedRuntime(group:"fish.payara.extras", name:"payara-micro", version:"5.2021.4");
	// use Empressia OpenID Connect.
	implementation(group:"jp.empressia", name:"jp.empressia.enterprise.security.oidc", version:"1.2.1");
	// use CDI.
	providedCompile(group:"jakarta.enterprise", name:"jakarta.enterprise.cdi-api", version:"2.0.2");
	// use Java EE Security API.
	providedCompile(group:"jakarta.security.enterprise", name:"jakarta.security.enterprise-api", version:"1.0.2");
	// use HttpServletRequest, HttpServletResponse.
	providedCompile(group:"jakarta.servlet", name: "jakarta.servlet-api", version:"4.0.2");
	// use for security interceptor priority.
	providedCompile(group:"jakarta.annotation", name:"jakarta.annotation-api", version:"1.3.2");
	// use MicroProfile Config API.
	providedCompile(group:"org.eclipse.microprofile.config", name:"microprofile-config-api", version:"1.3");
	// use JCache for security token cache (not in Jave EE 8).
	// providedRuntime(group:"javax.cache", name:"cache-api", version:"1.1.1");
	// use for JWT.
	implementation(group:"io.jsonwebtoken", name:"jjwt-jackson", version:"0.11.2");
	// use JAX-RS.
	providedCompile(group:"jakarta.ws.rs", name:"jakarta.ws.rs-api", version:"2.1.6");
	// use JPA.
	providedCompile(group:"org.eclipse.persistence", name:"jakarta.persistence", version:"2.2.3");
	// use EclipseLink for customize DatabasePlatform.
	providedCompile(group:"org.eclipse.persistence", name:"org.eclipse.persistence.jpa", version:"2.7.7");
	// use Transactional.
	providedCompile(group:"javax.transaction", name:"javax.transaction-api", version:"1.3");
	// use SQLite.
	runtimeOnly(group:"org.xerial", name:"sqlite-jdbc", version:"3.28.0");
}

tasks.withType(JavaCompile) {
	options.encoding "UTF-8";
	options.compilerArgs << "-parameters";
}

war {
	baseName moduleName;
	manifest {
		attributes (
			"Automatic-Module-Name": moduleName
		);
	}
}

task copySyncLibraries(type: jp.empressia.gradle.task.CopySync) {
	from = configurations.runtimeClasspath - configurations.providedRuntime;
	into = file("${buildDir}/libraries");
}

task copySyncRuntime(type: jp.empressia.gradle.task.CopySync) {
	from = configurations.providedRuntime.filter { it.name.contains("payara-micro-") };
	into = file("${buildDir}/runtime");
}

task start(type: JavaExec) {
	main = "-jar";
	args = [
		configurations.providedRuntime.find { it.name.contains("payara-micro-") }.absolutePath,
		"--rootdir", "\"${buildDir}/server/\"",
		"--deploy", "\"${buildDir}/libs/${moduleName}.war\""
	];
}
start.dependsOn(tasks.war);
